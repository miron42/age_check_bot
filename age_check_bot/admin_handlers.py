import os
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from decorators import admin_only
from db import (
    add_admin,
    remove_admin,
    get_admins,
    is_admin,
    get_all_ads,
    get_scheduled_broadcasts,
    remove_scheduled_broadcast,
    remove_all_scheduled_broadcasts,
)
from bot_handlers import admin_states, generate_repeated_broadcasts


async def admin_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id):
        return

    if not context.args:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin_add <user_id>")
        return

    try:
        new_admin_id = int(context.args[0])
        await add_admin(new_admin_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")
    except ValueError:
        await update.message.reply_text("‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")


async def show_main_admin_panel(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    user = getattr(update_or_query, 'effective_user', None) or getattr(
        update_or_query, 'from_user', None)

    if not user or not await is_admin(user.id):
        return

    keyboard = [
        [InlineKeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞", callback_data="admin_ads")],
        [InlineKeyboardButton("üë• –ê–¥–º–∏–Ω—ã", callback_data="admin_admins")],
        [InlineKeyboardButton("üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üñº –ü—Ä–µ–≤—å—é", callback_data="admin_preview")]
    ]

    markup = InlineKeyboardMarkup(keyboard)

    if hasattr(update_or_query, "message") and update_or_query.message:
        await update_or_query.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)
    else:
        await update_or_query.edit_message_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)


@admin_only
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_admin_panel(update, context)


@admin_only
async def admin_inline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data == "admin_main":
        await show_main_admin_panel(query, context)

    elif data == "admin_ads":
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_ad")],
            [InlineKeyboardButton("üìÉ –°–ø–∏—Å–æ–∫", callback_data="list_ads")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_ad")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_ad")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        await query.edit_message_text("üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "list_ads":
        from bot_handlers import show_ad_list
        await show_ad_list(query, context)

    elif data == "search_ad":
        admin_states[user_id] = "search_ad"
        await query.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")

    elif data == "delete_ad":
        admin_states[user_id] = "delete_ad"
        await query.edit_message_text("üóë –í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∫–ª–∞–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    elif data == "add_ad":
        admin_states[user_id] = "broadcast_new"
        await query.edit_message_text("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.\n(–†–µ–∫–ª–∞–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±–∞–∑–µ)")

    elif data == "admin_admins":
        keyboard = [
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫", callback_data="list_admins")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_admin")],
            [InlineKeyboardButton(
                "‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="select_remove_admin")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        await query.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "list_admins":
        admins = await get_admins()
        lines = []
        for admin_id in admins:
            try:
                user = await context.bot.get_chat(admin_id)
                name = f"@{user.username}" if user.username else f"{user.full_name} ({admin_id})"
            except Exception:
                name = str(admin_id)
            lines.append(f"üë§ {name}")

        text = "\n".join(lines) or "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        keyboard = [[InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_admins")]]
        await query.edit_message_text(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n{text}", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "add_admin":
        admin_states[user_id] = "add_admin_manual"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—ã:")

    elif data == "select_remove_admin":
        admins = await get_admins()
        keyboard = []
        for uid in admins:
            try:
                user = await context.bot.get_chat(uid)
                label = f"@{user.username}" if user.username else f"{user.full_name} ({uid})"
            except Exception:
                label = str(uid)
            keyboard.append([InlineKeyboardButton(
                label, callback_data=f"remove_admin_{uid}")])
        keyboard.append([InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_admins")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("remove_admin_"):
        uid = int(data.split("_")[-1])
        await remove_admin(uid)
        await query.edit_message_text(f"‚ûñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
        await admin_inline_handler(update, context)

    elif data == "admin_broadcast":
        keyboard = [
            [InlineKeyboardButton(
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="scheduled_list_0")],
            [InlineKeyboardButton(
                "üì¨ –î–æ–±–∞–≤–∏—Ç—å", callback_data="scheduled_add")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        await query.edit_message_text("üì§ –†–∞—Å—Å—ã–ª–∫–∞ (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫):", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "scheduled_remove_all":
        keyboard = [
            [InlineKeyboardButton(
                "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="scheduled_confirm_delete_all")],
            [InlineKeyboardButton(
                "‚ùå –ù–µ—Ç, –Ω–∞–∑–∞–¥", callback_data="scheduled_list")]
        ]
        await query.edit_message_text("‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "scheduled_confirm_delete_all":
        await remove_all_scheduled_broadcasts()
        await query.edit_message_text("üßπ –í—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")

    elif data == "duration_custom":
        state = admin_states.get(user_id)
        if not state:
            await query.edit_message_text("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        state["awaiting_custom_days"] = True
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")

    elif data.startswith("duration_days_"):
        state = admin_states.get(user_id)
        if not state:
            await query.edit_message_text("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        days = int(data.split("_")[-1])
        state["duration_days"] = days
        await generate_repeated_broadcasts(update, context, state)
        admin_states.pop(user_id, None)

    elif data.startswith("repeat_every_"):
        hours = int(data.split("_")[-1])
        state = admin_states.get(user_id, {})
        state["repeat_every_hours"] = hours
        admin_states[user_id] = state
        await query.edit_message_text(
            f"üîÅ –†–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—ã–µ {hours} —á.\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ü–ï–†–í–û–ô —Ä–∞—Å—Å—ã–ª–∫–∏:\n<YYYY-MM-DD HH:MM>"
        )

    elif data == "repeat_custom":
        state = admin_states.get(user_id, {})
        state["awaiting_custom_repeat"] = True
        admin_states[user_id] = state
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 36)")

    elif data.startswith("schedule_ad_"):
        ad_id = int(data.split("_")[-1])
        admin_states[user_id] = {"schedule_selected_ad": ad_id}
        keyboard = [
            [InlineKeyboardButton(
                "‚è± –ö–∞–∂–¥—ã–µ 6 —á", callback_data="repeat_every_6")],
            [InlineKeyboardButton(
                "‚è± –ö–∞–∂–¥—ã–µ 12 —á", callback_data="repeat_every_12")],
            [InlineKeyboardButton(
                "‚è± –ö–∞–∂–¥—ã–µ 24 —á", callback_data="repeat_every_24")],
            [InlineKeyboardButton("‚öô –ó–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é",
                                  callback_data="repeat_custom")]
        ]
        await query.edit_message_text(
            f"üÜî –†–µ–∫–ª–∞–º–∞ #{ad_id}\nüîÅ –ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data == "scheduled_add":
        ads = await get_all_ads()
        if not ads:
            await query.edit_message_text("üì≠ –ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        admin_states[user_id] = "schedule_select_ad"
        keyboard = []
        for ad_id, text in ads:
            preview = text[:30].replace('\n', ' ')
            keyboard.append([InlineKeyboardButton(
                f"üÜî {ad_id}: {preview}...", callback_data=f"schedule_ad_{ad_id}")])
        keyboard.append([InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast")])
        await query.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "scheduled_list":
        scheduled = await get_scheduled_broadcasts()
        if not scheduled:
            await query.edit_message_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.")
            return
        keyboard = [
            [InlineKeyboardButton(
                "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="scheduled_remove_all")]
        ]
        text_lines = []
        for b_id, text, _, send_at in scheduled:
            short = text[:30].replace("\n", " ")
            text_lines.append(f"üÜî #{b_id} ‚Äî {send_at}\nüìù {short}")
            keyboard.append([
                InlineKeyboardButton(
                    f"üóë –£–¥–∞–ª–∏—Ç—å #{b_id}", callback_data=f"scheduled_remove_{b_id}")
            ])
        keyboard.append([InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast")])
        await query.edit_message_text("üì§ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:\n\n" + "\n\n".join(text_lines),
                                      reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("scheduled_remove_"):
        ad_id = int(data.split("_")[-1])
        await remove_scheduled_broadcast(ad_id)
        keyboard = [[InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="scheduled_list")]]
        await query.edit_message_text(f"üóë –†–∞—Å—Å—ã–ª–∫–∞ #{ad_id} —É–¥–∞–ª–µ–Ω–∞.",
                                      reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("scheduled_list"):
        page = int(data.split("_")[-1]) if "_" in data else 0
        scheduled = await get_scheduled_broadcasts()

        if not scheduled:
            await query.edit_message_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.")
            return

        per_page = 10
        total_pages = (len(scheduled) + per_page - 1) // per_page
        start = page * per_page
        end = start + per_page
        items = scheduled[start:end]

        keyboard = []

        for b_id, text, image_path, send_at in items:
            short_text = text[:30].replace("\n", " ").strip()
            keyboard.append([InlineKeyboardButton(
                f"üóë –£–¥–∞–ª–∏—Ç—å #{b_id}", callback_data=f"scheduled_remove_{b_id}"
            )])

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"scheduled_list_{page-1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(
                "‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"scheduled_list_{page+1}"))

        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append([InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast")])
        keyboard.insert(0, [InlineKeyboardButton(
            "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="scheduled_remove_all")])

        message_text = f"üì§ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Å—Ç—Ä. {page+1}/{total_pages}):\n\n"
        for b_id, text, image_path, send_at in items:
            short_text = text[:30].replace("\n", " ").strip()
            message_text += f"üÜî #{b_id} ‚Äî {send_at}\nüìù {short_text}\n\n"

        await query.edit_message_text(message_text.strip(), reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "admin_preview":
        admin_states[user_id] = "preview_upload"
        await query.message.reply_text("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é (—Ñ–æ—Ç–æ –∏/–∏–ª–∏ —Ç–µ–∫—Å—Ç).")